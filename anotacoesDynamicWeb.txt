- configuracoes iniciais:
	* baixar tomcat quando não usar o do xampp
	* ter jboss instalado
	*ter jsp instalado
	I. new > other > project dynamic web;
	II. New Runtime;
	III. pasta Apache >  apache tomcat na versão que tem instalado no xampp;
	pra verificar, só ir nas configurações do xampp;
	IV. Next > Browse > selecionar caminho do tomcat.

- as pastas DAO e control sao criadas dentro de src > main > java;

----------- MODELO MVC
- CONTROL - SERVLET: recebe todos os dados referentes a html
- VIEW - JSP: cria pastas dinamicas pra html
	HTML, CSS e JS
- MODEL - persistencia e entidade/classe

- para configurar naveador que se quer utilizar para abrir a visualização
do html, basta clicar em window > web browser > escolher navegador

- para visualizar em um navegador, basta 
clicar com botão direito sob o codigo > open with > web browser

- fluxo:
	I. o arquivo .html tem um botão que, ao ser clicado, envia informações do
	html para o servlet (servidor);
	II. no servlet o .html será lido/interpretado;
	III. html/dados são enviados para outro lugar, que pode ser outra pagina de html
	OBS.: para receber os resultados do servlet, o ideal é criar um arquivo .jsp
	que é um arquivo dinamico. o html é estático
	
- servlet é criado na pasta CONTROL. ele é uma classe que herda propriedades 
	de HttpServlet

- o request pega informações de name e value das tags html, por isso é IMPORTANTE
	ter ambos definidos nas tags

- em "action" é preciso apontar para o servlet para onde serão enviados os dados html
	e também é preciso explicitar o metodo que será utilizado 
	exemplo: <form action="SvExemplo01" method="get">

- metodos doGet e doPost são ativados quando são chamados por get ou post;

- response é a variável (de uma classe) que contem informações do destinatário e remetente; 

- request é a variável (de uma classe) que  contem o conteúdo dos dados;

- caso o retorno do request seja null, pode ser que o parametro não exista ou o "name" 
	esteja escrito errado. ou seja, o retorno do request não dá erro!

- parametro: não pode ser alterado. para isso existe o attribute

- pode-se acrescentar informações (atributos) no request. para isso, basta utilizar
	exemplo: request.setAttribute("nomeAtributo", nomeVariavel);
	
- o .jsp é a junção do java com html em um arquvio. ele é dinâmico, por isso é mais
	indicado para se utilizar como arquivo para retorno das requisições do servlet;
	
------- FORMAS DE USAR JAVA DENTRO DO .JSP
- para formato mais genérico:               <% %>    > scriptlets
- para formato com retorno:                 <%= %>   > expressoes > retorna apenas 1 valor, não retorna varios de uma vez
- para formato com importação:              <%@ %>   > diretivas
- para formato com declaração de variavel:  <%! %>   > declarações
- para fazer comentários de js:             <%-- %>

- pelo método doGet, as informações recebidas no request são explicitadas na
url. ex.: http://localhost:8080/Projeto_MVC/SvExemplo01?nomeCadastrado=Thalia&nota1=7&nota2=8

- para fazer o projeto rodar no localhost, basta clicar com o botão direito
sob o arquivo de inicialização (geralmente o index) > Run as > Run on server
Obs.: na primeira vez aparecerão umas opções de preenchimento a respeito
do servidor que será utilizado. sempre devemos ir em Apache > selecionar a versão
do TomCast que está sendo utilizada

- usar o doGet somente enquanto estiver programando, para verificar o que estamos
fazendo. o ideal para deixar no projeto é o doPost, que não mostra os parametros e
demais informações que estão sendo enviadas para o servidor.

- JBoss > possui variedade de ferramentas para web

- o driver do banco de dados SEMPRE deve estar dentro da pasta "lib".
	caminho: projeto > src > main > webapp > web-inf > lib
	OBS.: após colocar lá, deve-se fazer o build path apontando para esse caminho
	
- recomendação do prof.: nome de servlet ser com um padrão. 
	exe: SvCarroCadastrar - "sv" + nomeClasse + nomeMetodo

- "action" e "method" são métodos de form e devem ser utilizados quando tudo o que estiver 
dentro do formulário for enviado ao mesmo servlet. no caso de não ser para o mesmo, basta,
ao invés de colocar os metodos no form, colocar dentro das inputs de type="submit".
OBS.: os metodos nao serão os mesmos! action = formaction > method = formmethod
OBS.2: o objetivo é reduzir varias pgs html para apenas 1, contendo todas as ações

- dentro do .jsp dá para usar o metodo "out.println("o que se quer printar")" que tem a função de 
escrever na tela do html > se usa dentro dos colchetes inclinados

- é possível abrir e fechar os colchetes inclinados para codigo java sem que a logica esteja finalizada.
por exemplo: <% while(){ %>   <p>oi</p>   <% } %>

- pensando em segurança, não é aconselhável usar a input com hidden para guardar uma informação sobre
 a página. ao invés disso, usar: request.getSession().setAttribute();
 
- o servidor é capaz de armazenar dados como variaveis (como no caso acima), tempo de sessão, etc, e 
tudo fica disponivel para uma mesma sessão apenas. o proprio servidor faz essa identificação.
OBS.: uma sessao é iniciada após a primeira requisição realizada.
OBS.: não será necessario usar um submit e form

- o ideal é guardar os dados do usuario em um objeto logo após o login - no servidor - e depois
utilizar outro servlet intermediario para fazer outras ações

- a analise de "se o usuario pode ou não fazer tal ação" deve ser feita no servlet.
	para cada jsp deve haver um servlet para uma nova validação
	
- para redirecionamento por perfil, é bom criar um "tipo de usuario" como atributo enviado no objeto

- para iniciar uma nova sessão deve-se utilizar: request.getSession(true);
pois se não podem haver resíduos dos dados do ultimo login realizado
para logoff: request.getSession(false);   > apaga instantaneamente  os dados

- response.sendRedirect("caminho.html") >  direciona para a pagina de login

